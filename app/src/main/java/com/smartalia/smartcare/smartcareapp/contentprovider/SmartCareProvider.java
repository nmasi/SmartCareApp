package com.smartalia.smartcare.smartcareapp.contentprovider;import android.content.ContentProvider;import android.content.ContentUris;import android.content.ContentValues;import android.content.UriMatcher;import android.database.Cursor;import android.net.Uri;import android.support.annotation.Nullable;import android.util.Log;/** * Created by nicola on 02/07/16. */public class SmartCareProvider extends ContentProvider {    static final int DROG = 100;    static final int DROG_WITH_NAME = 101;    static final int PATIENT = 300;    private static final String LOG = SmartCareProvider.class.getName();    private static final int CODE_DROGS = 100;    private static final int CODE_DROG = 101;    private static final int CODE_DROG_FILTER = 102;    private static final UriMatcher matcher = buildUriMatcher();    private  SmartCareDbHelper mOpenHelper;    static UriMatcher buildUriMatcher() {        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);        matcher.addURI(SmartCareContract.CONTENT_AUTHORITY, SmartCareContract.Drug.TABLE_NAME,                CODE_DROGS);        matcher.addURI(SmartCareContract.CONTENT_AUTHORITY, SmartCareContract.Drug.TABLE_NAME + "/#",                CODE_DROG);        matcher.addURI(SmartCareContract.CONTENT_AUTHORITY, SmartCareContract.Drug.TABLE_NAME + "/*",                CODE_DROG_FILTER);        return matcher;    }    @Override    public boolean onCreate() {         mOpenHelper =  new SmartCareDbHelper(getContext());        return true;    }    @Nullable    @Override    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {        Cursor cursor = null;        switch (matcher.match(uri)) {            case CODE_DROGS:                cursor = mOpenHelper.getReadableDatabase().query(                        SmartCareContract.Drug.TABLE_NAME,                        projection,                        selection,                        selectionArgs,                        null, null, sortOrder                );                break;            case CODE_DROG:                cursor = mOpenHelper.getReadableDatabase().query(                        SmartCareContract.Drug.TABLE_NAME,                        projection,                        SmartCareContract.Drug.COLUMN_ID + " = ?",                        new String[]{uri.getLastPathSegment()},                        null, null, sortOrder                );                break;            default:                throw new UnsupportedOperationException("Unknown uri: " + uri);        }        Log.d(LOG, "query: " + uri.toString() + ", " + cursor.getCount());        cursor.setNotificationUri(getContext().getContentResolver(), uri);        return cursor;    }    @Nullable    @Override    public String getType(Uri uri) {        final int match = matcher.match(uri);        String type = null;        switch (match){            case CODE_DROGS:                type = SmartCareContract.Drug.CONTENT_TYPE;                break;            case CODE_DROG:                type = SmartCareContract.Drug.CONTENT_ITEM_TYPE;                break;            case CODE_DROG_FILTER:                type = SmartCareContract.Drug.CONTENT_TYPE;                break;            default:                throw new UnsupportedOperationException("Unknown uri: " + uri);        }        return null;    }    @Nullable    @Override    public Uri insert(Uri uri, ContentValues contentValues) {        Uri returnUri = null;        long id = -1;        switch (matcher.match(uri)){            case CODE_DROGS:                id = mOpenHelper.getWritableDatabase().insert(                        SmartCareContract.Drug.TABLE_NAME,                        null, contentValues                );                break;            default:                throw new UnsupportedOperationException("Unknown uri: " + uri);        }        returnUri = ContentUris.withAppendedId(uri, id);        Log.d(LOG, "insert: " + uri.toString() + ", " + returnUri.toString());        if(!returnUri.getLastPathSegment().equals("-1"))            getContext().getContentResolver().notifyChange(uri, null);        return returnUri;    }    @Override    public int delete(Uri uri, String s, String[] strings) {        return 0;    }    @Override    public int update(Uri uri, ContentValues contentValues, String s, String[] strings) {        return 0;    }}